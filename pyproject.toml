[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "plinko-dynamics"
version = "2.1.0"
description = "Advanced Quantum Galton Board Simulation with AI-Enhanced Analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Serah Rashidi", email = "its-serah@github.com"}
]
maintainers = [
    {name = "Serah Rashidi", email = "its-serah@github.com"}
]
keywords = [
    "quantum computing",
    "quantum simulation",
    "galton board",
    "plinko",
    "monte carlo",
    "statistical physics",
    "machine learning",
    "neural ode",
    "pennylane",
    "quantum circuits"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "pennylane>=0.32.0",
    "numpy>=1.21.0",
    "scipy>=1.8.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "torch>=1.9.0",
    "torchdiffeq>=0.2.0",
    "pandas>=1.4.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-benchmark>=3.4.0",
    "pytest-xdist>=2.5.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "autodoc>=0.5.0",
]
viz = [
    "plotly>=5.10.0",
]
ml = [
    "scikit-learn>=1.0.0",
]
profiling = [
    "memory-profiler>=0.60.0",
    "line-profiler>=3.5.0",
]
hardware = [
    "pennylane-qiskit>=0.32.0",
    "pennylane-cirq>=0.32.0",
    "pennylane-ionq>=0.32.0",
    "pennylane-braket>=0.32.0",
]
acceleration = [
    "cupy-cuda11x",
    "jax",
    "numba>=0.56.0",
]
all = [
    "plinko-dynamics[dev,docs,viz,ml,profiling]",
]

[project.urls]
Homepage = "https://github.com/its-serah/Plinko-Dynamics"
Documentation = "https://plinko-dynamics.readthedocs.io"
Repository = "https://github.com/its-serah/Plinko-Dynamics.git"
"Bug Tracker" = "https://github.com/its-serah/Plinko-Dynamics/issues"
Changelog = "https://github.com/its-serah/Plinko-Dynamics/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["plinko_dynamics"]

[tool.setuptools.package-data]
plinko_dynamics = ["*.json", "*.yaml", "*.txt"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "integration: marks tests as integration tests",
    "hardware: marks tests requiring quantum hardware",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true

[tool.coverage.run]
source = ["plinko_dynamics"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
]
